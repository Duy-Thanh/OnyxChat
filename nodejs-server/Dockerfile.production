FROM node:22.14.0-alpine3.21 AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN apk update
RUN apk upgrade
RUN npm install
RUN npm ci --only=production && \
    npm cache clean --force

# Copy the rest of the application
COPY . .

# Build the application if needed (uncomment if you have a build step)
# RUN npm run build

# Create a smaller production image
FROM node:22.14.0-alpine3.21

# Set node environment
ENV NODE_ENV=production

# Install necessary tools
RUN apk add --no-cache netcat-openbsd dumb-init

# Set working directory
WORKDIR /app

# Copy from builder - don't use chown to keep root ownership
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/src ./src
COPY --from=builder /app/package*.json ./

# Create app directories with appropriate permissions
RUN mkdir -p /app/logs /app/uploads && \
    chmod 777 /app/uploads && \
    chmod 755 /app/logs

# Copy entrypoint script
COPY docker-entrypoint.sh /
RUN chmod +x /docker-entrypoint.sh

# Expose the port the app will run on
EXPOSE 8081

# Use dumb-init as the entrypoint to properly handle signals
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application
CMD ["/docker-entrypoint.sh"] 