   Compiling onyxchat-server v0.1.0 (/home/nekkochan/AndroidStudioProjects/onyxchat/server)
warning: unused import: `stream::StreamExt`
 --> src/bin/echo-server.rs:7:30
  |
7 | use futures::{sink::SinkExt, stream::StreamExt};
  |                              ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `sink::SinkExt`
 --> src/bin/echo-server.rs:7:15
  |
7 | use futures::{sink::SinkExt, stream::StreamExt};
  |               ^^^^^^^^^^^^^

warning: `onyxchat-server` (bin "echo-server") generated 2 warnings (run `cargo fix --bin "echo-server"` to apply 1 suggestion)
error[E0583]: file not found for module `routes`
  --> src/main.rs:17:1
   |
17 | mod routes;
   | ^^^^^^^^^^^
   |
   = help: to create the module `routes`, create file "src/routes.rs" or "src/routes/mod.rs"
   = note: if there is a `mod routes` elsewhere in the crate already, import it with `use crate::...` instead

error: proc macro panicked
   --> src/models/auth.rs:123:9
    |
123 | /         sqlx::query!(
124 | |             r#"
125 | |             INSERT INTO refresh_tokens (user_id, token, expires_at)
126 | |             VALUES ($1, $2, $3)
...   |
130 | |             expires_at
131 | |         )
    | |_________^
    |
    = help: message: failed to load environment from "/home/nekkochan/AndroidStudioProjects/onyxchat/server/.env", Error parsing line: 'DB_POOL_MAX_SIZE=5 ', error at line index: 19
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/auth.rs:141:29
    |
141 |           let refresh_token = sqlx::query_as!(
    |  _____________________________^
142 | |             RefreshToken,
143 | |             r#"
144 | |             SELECT * FROM refresh_tokens
...   |
147 | |             token
148 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/auth.rs:159:9
    |
159 | /         sqlx::query!(
160 | |             r#"
161 | |             UPDATE refresh_tokens
162 | |             SET revoked = true, revoked_at = NOW()
...   |
165 | |             token
166 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/auth.rs:176:9
    |
176 | /         sqlx::query!(
177 | |             r#"
178 | |             UPDATE refresh_tokens
179 | |             SET revoked = true, revoked_at = NOW()
...   |
182 | |             user_id
183 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/user.rs:63:9
   |
63 | /         sqlx::query_as!(
64 | |             User,
65 | |             r#"
66 | |             SELECT * FROM users WHERE id = $1
67 | |             "#,
68 | |             id
69 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/user.rs:76:9
   |
76 | /         sqlx::query_as!(
77 | |             User,
78 | |             r#"
79 | |             SELECT * FROM users WHERE username = $1
80 | |             "#,
81 | |             username
82 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/user.rs:89:9
   |
89 | /         sqlx::query_as!(
90 | |             User,
91 | |             r#"
92 | |             SELECT * FROM users WHERE email = $1
93 | |             "#,
94 | |             email
95 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/user.rs:102:9
    |
102 | /         sqlx::query_as!(
103 | |             User,
104 | |             r#"
105 | |             INSERT INTO users (username, email, password_hash, display_name, bio)
...   |
113 | |             user.bio
114 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/user.rs:183:9
    |
183 | /         sqlx::query!(
184 | |             r#"
185 | |             UPDATE users
186 | |             SET last_active_at = NOW()
...   |
189 | |             id
190 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/message.rs:49:9
   |
49 | /         sqlx::query_as!(
50 | |             Message,
51 | |             r#"
52 | |             INSERT INTO messages (sender_id, recipient_id, encrypted_content, iv)
...  |
59 | |             iv
60 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/message.rs:67:9
   |
67 | /         sqlx::query_as!(
68 | |             Message,
69 | |             r#"
70 | |             SELECT * FROM messages
...  |
73 | |             id
74 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:89:13
    |
89  | /             sqlx::query_as!(
90  | |                 Message,
91  | |                 r#"
92  | |                 SELECT * FROM messages
...   |
101 | |                 offset
102 | |             )
    | |_____________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:107:13
    |
107 | /             sqlx::query_as!(
108 | |                 Message,
109 | |                 r#"
110 | |                 SELECT * FROM messages
...   |
118 | |                 offset
119 | |             )
    | |_____________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:128:9
    |
128 | /         sqlx::query_as!(
129 | |             Message,
130 | |             r#"
131 | |             UPDATE messages
...   |
136 | |             id
137 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:144:9
    |
144 | /         sqlx::query_as!(
145 | |             Message,
146 | |             r#"
147 | |             UPDATE messages
...   |
152 | |             id
153 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:160:9
    |
160 | /         sqlx::query_as!(
161 | |             Message,
162 | |             r#"
163 | |             UPDATE messages
...   |
168 | |             id
169 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:193:23
    |
193 |           let message = sqlx::query_as!(
    |  _______________________^
194 | |             Message,
195 | |             r#"
196 | |             UPDATE messages
...   |
202 | |             message_id
203 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/message.rs:215:23
    |
215 |           let message = sqlx::query_as!(
    |  _______________________^
216 | |             Message,
217 | |             r#"
218 | |             UPDATE messages
...   |
224 | |             message_id
225 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/crypto.rs:79:9
   |
79 | /         sqlx::query!(
80 | |             r#"DELETE FROM user_keys WHERE user_id = $1"#,
81 | |             user_id
82 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
  --> src/models/crypto.rs:87:24
   |
87 |           let user_key = sqlx::query_as!(
   |  ________________________^
88 | |             UserKey,
89 | |             r#"
90 | |             INSERT INTO user_keys (user_id, identity_key, signed_prekey, signed_prekey_signature, prekey_id)
...  |
98 | |             request.prekey_id
99 | |         )
   | |_________^
   |
   = help: message: Lazy instance has previously been poisoned
   = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:108:9
    |
108 | /         sqlx::query_as!(
109 | |             UserKey,
110 | |             r#"
111 | |             SELECT * FROM user_keys
...   |
114 | |             user_id
115 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:135:28
    |
135 |               let existing = sqlx::query!(
    |  ____________________________^
136 | |                 r#"
137 | |                 SELECT id FROM one_time_prekeys
138 | |                 WHERE user_id = $1 AND prekey_id = $2
...   |
141 | |                 prekey.prekey_id
142 | |             )
    | |_____________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:148:34
    |
148 |                   let new_prekey = sqlx::query_as!(
    |  __________________________________^
149 | |                     OneTimePreKey,
150 | |                     r#"
151 | |                     INSERT INTO one_time_prekeys (user_id, prekey_id, prekey)
...   |
157 | |                     prekey.prekey
158 | |                 )
    | |_________________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:178:22
    |
178 |           let prekey = sqlx::query_as!(
    |  ______________________^
179 | |             OneTimePreKey,
180 | |             r#"
181 | |             SELECT * FROM one_time_prekeys
...   |
185 | |             user_id
186 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:192:13
    |
192 | /             sqlx::query!(
193 | |                 r#"
194 | |                 UPDATE one_time_prekeys
195 | |                 SET used = true, used_at = NOW()
...   |
198 | |                 prekey.id
199 | |             )
    | |_____________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:219:24
    |
219 |           let existing = sqlx::query!(
    |  ________________________^
220 | |             r#"
221 | |             SELECT id FROM sessions
222 | |             WHERE user_id = $1 AND other_user_id = $2
...   |
225 | |             other_user_id
226 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:232:13
    |
232 | /             sqlx::query_as!(
233 | |                 Session,
234 | |                 r#"
235 | |                 UPDATE sessions
...   |
241 | |                 existing.id
242 | |             )
    | |_____________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:247:13
    |
247 | /             sqlx::query_as!(
248 | |                 Session,
249 | |                 r#"
250 | |                 INSERT INTO sessions (user_id, other_user_id, session_data)
...   |
256 | |                 session_data
257 | |             )
    | |_____________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc macro panicked
   --> src/models/crypto.rs:270:23
    |
270 |           let session = sqlx::query_as!(
    |  _______________________^
271 | |             Session,
272 | |             r#"
273 | |             SELECT * FROM sessions
...   |
277 | |             other_user_id
278 | |         )
    | |_________^
    |
    = help: message: Lazy instance has previously been poisoned
    = note: this error originates in the macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `crate::middleware::auth::auth`
  --> src/main.rs:24:5
   |
24 | use crate::middleware::auth::auth;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `auth` in `middleware::auth`
   |
help: consider importing one of these modules instead
   |
24 | use crate::handlers::auth;
   |     ~~~~~~~~~~~~~~~~~~~~~
24 | use crate::middleware::auth;
   |     ~~~~~~~~~~~~~~~~~~~~~~~
24 | use crate::models::auth;
   |     ~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `dotenv`
  --> src/main.rs:13:5
   |
13 | use dotenv::dotenv;
   |     ^^^^^^ use of undeclared crate or module `dotenv`

error[E0432]: unresolved imports `crate::config`, `crate::error`
  --> src/models/auth.rs:13:5
   |
13 |     config::AppConfig,
   |     ^^^^^^ could not find `config` in the crate root
14 |     error::{AppError, Result},
   |     ^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `core::error`

error[E0432]: unresolved import `crate::error`
 --> src/models/user.rs:7:12
  |
7 | use crate::error::{AppError, Result};
  |            ^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `core::error`

error[E0432]: unresolved import `crate::error`
 --> src/models/message.rs:7:12
  |
7 | use crate::error::{AppError, Result};
  |            ^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `core::error`

error[E0432]: unresolved import `crate::error`
 --> src/models/crypto.rs:7:12
  |
7 | use crate::error::{AppError, Result};
  |            ^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `core::error`

error[E0433]: failed to resolve: use of undeclared crate or module `axum_extra`
 --> src/handlers/auth.rs:6:5
  |
6 | use axum_extra::{
  |     ^^^^^^^^^^ use of undeclared crate or module `axum_extra`

error[E0432]: unresolved import `crate::config`
  --> src/models/mod.rs:14:12
   |
14 | use crate::config::AppConfig;
   |            ^^^^^^ could not find `config` in the crate root

error[E0432]: unresolved import `axum_extra`
 --> src/handlers/auth.rs:6:5
  |
6 | use axum_extra::{
  |     ^^^^^^^^^^ use of undeclared crate or module `axum_extra`

error[E0433]: failed to resolve: use of undeclared crate or module `axum_extra`
 --> src/handlers/user.rs:6:5
  |
6 | use axum_extra::{
  |     ^^^^^^^^^^ use of undeclared crate or module `axum_extra`

error[E0432]: unresolved import `crate::error`
  --> src/handlers/auth.rs:12:5
   |
12 |     error::{AppError, Result},
   |     ^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `core::error`

error[E0432]: unresolved import `axum_extra`
 --> src/handlers/user.rs:6:5
  |
6 | use axum_extra::{
  |     ^^^^^^^^^^ use of undeclared crate or module `axum_extra`

error[E0432]: unresolved import `crate::error`
  --> src/handlers/user.rs:13:5
   |
13 |     error::{AppError, Result},
   |     ^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `core::error`

error[E0432]: unresolved import `crate::error`
  --> src/handlers/message.rs:10:5
   |
10 |     error::Result,
   |     ^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `core::error`

error[E0433]: failed to resolve: use of undeclared crate or module `axum_extra`
 --> src/middleware/auth.rs:8:5
  |
8 | use axum_extra::{
  |     ^^^^^^^^^^ use of undeclared crate or module `axum_extra`

error[E0432]: unresolved import `crate::error`
 --> src/handlers/crypto.rs:9:5
  |
9 |     error::Result,
  |     ^^^^^
  |     |
  |     unresolved import
  |     help: a similar path exists: `core::error`

error[E0432]: unresolved import `axum_extra`
 --> src/middleware/auth.rs:8:5
  |
8 | use axum_extra::{
  |     ^^^^^^^^^^ use of undeclared crate or module `axum_extra`

error[E0432]: unresolved import `crate::error`
  --> src/middleware/auth.rs:15:5
   |
15 |     error::AppError,
   |     ^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `core::error`

error[E0432]: unresolved import `crate::error`
  --> src/ws.rs:19:5
   |
19 |     error::{AppError, Result},
   |     ^^^^^
   |     |
   |     unresolved import
   |     help: a similar path exists: `core::error`

error: cannot find derive macro `Serialize` in this scope
  --> src/main.rs:29:24
   |
29 | #[derive(Debug, Clone, Serialize)]
   |                        ^^^^^^^^^
   |
help: consider importing this derive macro
   |
1  + use serde::Serialize;
   |

error: cannot find attribute `serde` in this scope
  --> src/main.rs:34:7
   |
34 |     #[serde(skip_serializing)]
   |       ^^^^^
   |
   = note: `serde` is in scope, but it is a crate, not an attribute

error: cannot find derive macro `Serialize` in this scope
  --> src/main.rs:40:24
   |
40 | #[derive(Debug, Clone, Serialize)]
   |                        ^^^^^^^^^
   |
help: consider importing this derive macro
   |
1  + use serde::Serialize;
   |

error: cannot find derive macro `Deserialize` in this scope
  --> src/main.rs:52:17
   |
52 | #[derive(Debug, Deserialize)]
   |                 ^^^^^^^^^^^
   |
help: consider importing this derive macro
   |
1  + use serde::Deserialize;
   |

error: cannot find derive macro `Deserialize` in this scope
  --> src/main.rs:60:17
   |
60 | #[derive(Debug, Deserialize)]
   |                 ^^^^^^^^^^^
   |
help: consider importing this derive macro
   |
1  + use serde::Deserialize;
   |

error: cannot find derive macro `Serialize` in this scope
  --> src/main.rs:67:17
   |
67 | #[derive(Debug, Serialize)]
   |                 ^^^^^^^^^
   |
help: consider importing this derive macro
   |
1  + use serde::Serialize;
   |

error: cannot find derive macro `Serialize` in this scope
  --> src/main.rs:75:17
   |
75 | #[derive(Debug, Serialize)]
   |                 ^^^^^^^^^
   |
help: consider importing this derive macro
   |
1  + use serde::Serialize;
   |

error[E0433]: failed to resolve: unresolved import
   --> src/handlers/message.rs:101:27
    |
101 |         return Err(crate::error::AppError::forbidden(
    |                           ^^^^^
    |                           |
    |                           unresolved import
    |                           help: a similar path exists: `core::error`

error[E0433]: failed to resolve: unresolved import
   --> src/handlers/message.rs:131:27
    |
131 |         return Err(crate::error::AppError::forbidden(
    |                           ^^^^^
    |                           |
    |                           unresolved import
    |                           help: a similar path exists: `core::error`

error[E0433]: failed to resolve: unresolved import
   --> src/handlers/message.rs:152:27
    |
152 |         return Err(crate::error::AppError::forbidden(
    |                           ^^^^^
    |                           |
    |                           unresolved import
    |                           help: a similar path exists: `core::error`

error[E0433]: failed to resolve: unresolved import
   --> src/handlers/message.rs:173:27
    |
173 |         return Err(crate::error::AppError::forbidden(
    |                           ^^^^^
    |                           |
    |                           unresolved import
    |                           help: a similar path exists: `core::error`

error[E0433]: failed to resolve: use of undeclared type `AuthService`
   --> src/main.rs:164:25
    |
164 |     let password_hash = AuthService::hash_password(&payload.password)?;
    |                         ^^^^^^^^^^^ use of undeclared type `AuthService`
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::models::AuthService;
    |

error[E0433]: failed to resolve: use of undeclared type `Uuid`
   --> src/main.rs:167:19
    |
167 |     let user_id = Uuid::new_v4().to_string();
    |                   ^^^^ use of undeclared type `Uuid`
    |
help: consider importing one of these structs
    |
1   + use sqlx::types::Uuid;
    |
1   + use uuid::Uuid;
    |

error[E0412]: cannot find type `LoginRequest` in this scope
   --> src/main.rs:199:25
    |
199 |     Json(payload): Json<LoginRequest>,
    |                         ^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::models::LoginRequest;
    |

error[E0412]: cannot find type `AuthResponse` in this scope
   --> src/main.rs:200:31
    |
200 | ) -> Result<(StatusCode, Json<AuthResponse>)> {
    |                               ^^^^^^^^^^^^
    |
   ::: /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.3.4/src/response/into_response.rs:126:1
    |
126 | pub trait IntoResponse {
    | ---------------------- similarly named trait `IntoResponse` defined here
    |
help: a trait with a similar name exists
    |
200 | ) -> Result<(StatusCode, Json<IntoResponse>)> {
    |                               ~~~~~~~~~~~~
help: consider importing this struct through its public re-export
    |
1   + use crate::models::AuthResponse;
    |

error[E0433]: failed to resolve: use of undeclared type `AuthService`
   --> src/main.rs:219:29
    |
219 |     let password_verified = AuthService::verify_password(&payload.password, &user.password_hash)?;
    |                             ^^^^^^^^^^^ use of undeclared type `AuthService`
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::models::AuthService;
    |

error[E0433]: failed to resolve: use of undeclared type `AuthService`
   --> src/main.rs:226:17
    |
226 |     let token = AuthService::create_token(&user.id, &user.username)?;
    |                 ^^^^^^^^^^^ use of undeclared type `AuthService`
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::models::AuthService;
    |

error[E0422]: cannot find struct, variant or union type `AuthResponse` in this scope
   --> src/main.rs:231:14
    |
231 |         Json(AuthResponse {
    |              ^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::models::AuthResponse;
    |

error[E0531]: cannot find tuple struct or tuple variant `Path` in this scope
   --> src/main.rs:241:5
    |
241 |     Path(user_id): Path<String>,
    |     ^^^^ not found in this scope
    |
help: consider importing this tuple struct
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `Path` in this scope
   --> src/main.rs:241:20
    |
241 |     Path(user_id): Path<String>,
    |                    ^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::path::Path;
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `CurrentUser` in this scope
   --> src/main.rs:254:19
    |
254 |     current_user: CurrentUser,
    |                   ^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::middleware::auth::CurrentUser;
    |

error[E0433]: failed to resolve: use of undeclared type `Uuid`
   --> src/main.rs:271:22
    |
271 |     let message_id = Uuid::new_v4().to_string();
    |                      ^^^^ use of undeclared type `Uuid`
    |
help: consider importing one of these structs
    |
1   + use sqlx::types::Uuid;
    |
1   + use uuid::Uuid;
    |

error[E0412]: cannot find type `CurrentUser` in this scope
   --> src/main.rs:316:19
    |
316 |     current_user: CurrentUser,
    |                   ^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::middleware::auth::CurrentUser;
    |

error[E0531]: cannot find tuple struct or tuple variant `Path` in this scope
   --> src/main.rs:317:5
    |
317 |     Path(user_id): Path<String>,
    |     ^^^^ not found in this scope
    |
help: consider importing this tuple struct
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `Path` in this scope
   --> src/main.rs:317:20
    |
317 |     Path(user_id): Path<String>,
    |                    ^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::path::Path;
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `CurrentUser` in this scope
   --> src/main.rs:345:19
    |
345 |     current_user: CurrentUser,
    |                   ^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::middleware::auth::CurrentUser;
    |

error[E0531]: cannot find tuple struct or tuple variant `Path` in this scope
   --> src/main.rs:346:5
    |
346 |     Path(message_id): Path<String>,
    |     ^^^^ not found in this scope
    |
help: consider importing this tuple struct
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `Path` in this scope
   --> src/main.rs:346:23
    |
346 |     Path(message_id): Path<String>,
    |                       ^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::path::Path;
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `CurrentUser` in this scope
   --> src/main.rs:387:19
    |
387 |     current_user: CurrentUser,
    |                   ^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::middleware::auth::CurrentUser;
    |

error[E0531]: cannot find tuple struct or tuple variant `Path` in this scope
   --> src/main.rs:388:5
    |
388 |     Path(message_id): Path<String>,
    |     ^^^^ not found in this scope
    |
help: consider importing this tuple struct
    |
1   + use axum::extract::Path;
    |

error[E0412]: cannot find type `Path` in this scope
   --> src/main.rs:388:23
    |
388 |     Path(message_id): Path<String>,
    |                       ^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::path::Path;
    |
1   + use axum::extract::Path;
    |

warning: unused imports: `header` and `post`
 --> src/main.rs:6:20
  |
6 |     routing::{get, post},
  |                    ^^^^
7 |     http::{StatusCode, header},
  |                        ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `error`
  --> src/main.rs:12:17
   |
12 | use log::{info, error};
   |                 ^^^^^

warning: unused import: `auth::*`
 --> src/models/mod.rs:6:9
  |
6 | pub use auth::*;
  |         ^^^^^^^

warning: unused import: `user::*`
 --> src/models/mod.rs:7:9
  |
7 | pub use user::*;
  |         ^^^^^^^

warning: unused import: `message::*`
 --> src/models/mod.rs:8:9
  |
8 | pub use message::*;
  |         ^^^^^^^^^^

warning: unused import: `crypto::*`
 --> src/models/mod.rs:9:9
  |
9 | pub use crypto::*;
  |         ^^^^^^^^^

warning: unused import: `http::StatusCode`
 --> src/handlers/user.rs:3:5
  |
3 |     http::StatusCode,
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `State` and `StatusCode`
 --> src/middleware/auth.rs:5:42
  |
5 |     extract::{FromRef, FromRequestParts, State},
  |                                          ^^^^^
6 |     http::{request::Parts, StatusCode},
  |                            ^^^^^^^^^^

warning: unused import: `Message as DbMessage`
  --> src/ws.rs:21:5
   |
21 |     Message as DbMessage,
   |     ^^^^^^^^^^^^^^^^^^^^

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:149:6
    |
149 | ) -> Result<(StatusCode, Json<UserCreatedResponse>)> {
    |      ^^^^^^ --------------------------------------- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
149 | ) -> Result<(StatusCode, Json<UserCreatedResponse>), E> {
    |                                                    +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:200:6
    |
200 | ) -> Result<(StatusCode, Json<AuthResponse>)> {
    |      ^^^^^^ -------------------------------- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
200 | ) -> Result<(StatusCode, Json<AuthResponse>), E> {
    |                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:242:6
    |
242 | ) -> Result<Json<User>> {
    |      ^^^^^^ ---------- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
242 | ) -> Result<Json<User>, E> {
    |                       +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:256:6
    |
256 | ) -> Result<(StatusCode, Json<MessageResponse>)> {
    |      ^^^^^^ ----------------------------------- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
256 | ) -> Result<(StatusCode, Json<MessageResponse>), E> {
    |                                                +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:318:6
    |
318 | ) -> Result<Json<Vec<Message>>> {
    |      ^^^^^^ ------------------ supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
318 | ) -> Result<Json<Vec<Message>>, E> {
    |                               +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:347:6
    |
347 | ) -> Result<Json<MessageResponse>> {
    |      ^^^^^^ --------------------- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
347 | ) -> Result<Json<MessageResponse>, E> {
    |                                  +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> src/main.rs:389:6
    |
389 | ) -> Result<Json<MessageResponse>> {
    |      ^^^^^^ --------------------- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
389 | ) -> Result<Json<MessageResponse>, E> {
    |                                  +++

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:152:20
    |
152 |         return Err(AppError::BadRequest("Username, email, and password are required".to_string()));
    |                    ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `users` on type `AppState`
   --> src/main.rs:157:27
    |
157 |         let users = state.users.read().unwrap();
    |                           ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:159:24
    |
159 |             return Err(AppError::Conflict("Username already exists".to_string()));
    |                        ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `users` on type `AppState`
   --> src/main.rs:180:31
    |
180 |         let mut users = state.users.write().unwrap();
    |                               ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0609]: no field `users` on type `AppState`
   --> src/main.rs:203:27
    |
203 |         let users = state.users.read().unwrap();
    |                           ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:214:24
    |
214 |             return Err(AppError::Auth(AuthError::InvalidPassword));
    |                        ^^^^^^^^ use of undeclared type `AppError`

error[E0433]: failed to resolve: use of undeclared type `AuthError`
   --> src/main.rs:214:39
    |
214 |             return Err(AppError::Auth(AuthError::InvalidPassword));
    |                                       ^^^^^^^^^ use of undeclared type `AuthError`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:222:20
    |
222 |         return Err(AppError::Auth(AuthError::InvalidPassword));
    |                    ^^^^^^^^ use of undeclared type `AppError`

error[E0433]: failed to resolve: use of undeclared type `AuthError`
   --> src/main.rs:222:35
    |
222 |         return Err(AppError::Auth(AuthError::InvalidPassword));
    |                                   ^^^^^^^^^ use of undeclared type `AuthError`

error[E0609]: no field `users` on type `AppState`
   --> src/main.rs:244:23
    |
244 |     let users = state.users.read().unwrap();
    |                       ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:248:21
    |
248 |         None => Err(AppError::NotFound(format!("User with ID {} not found", user_id))),
    |                     ^^^^^^^^ use of undeclared type `AppError`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:259:20
    |
259 |         return Err(AppError::BadRequest("Recipient ID and content are required".to_string()));
    |                    ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `users` on type `AppState`
   --> src/main.rs:264:27
    |
264 |         let users = state.users.read().unwrap();
    |                           ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:266:24
    |
266 |             return Err(AppError::NotFound(format!("Recipient with ID {} not found", payload.recipient_id)));
    |                        ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `messages` on type `AppState`
   --> src/main.rs:286:34
    |
286 |         let mut messages = state.messages.write().unwrap();
    |                                  ^^^^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0277]: the trait bound `Message: Serialize` is not satisfied
    --> src/main.rs:292:50
     |
292  |         let message_json = serde_json::to_string(&message).unwrap_or_default();
     |                            --------------------- ^^^^^^^^ the trait `Serialize` is not implemented for `Message`
     |                            |
     |                            required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `Message` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 193 others
note: required by a bound in `serde_json::to_string`
    --> /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.140/src/ser.rs:2239:17
     |
2237 | pub fn to_string<T>(value: &T) -> Result<String>
     |        --------- required by a bound in this function
2238 | where
2239 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `to_string`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:321:20
    |
321 |         return Err(AppError::Forbidden("You can only access your own messages".to_string()));
    |                    ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `users` on type `AppState`
   --> src/main.rs:326:27
    |
326 |         let users = state.users.read().unwrap();
    |                           ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:328:24
    |
328 |             return Err(AppError::NotFound(format!("User with ID {} not found", user_id)));
    |                        ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `messages` on type `AppState`
   --> src/main.rs:333:26
    |
333 |     let messages = state.messages.read().unwrap();
    |                          ^^^^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0609]: no field `messages` on type `AppState`
   --> src/main.rs:349:30
    |
349 |     let mut messages = state.messages.write().unwrap();
    |                              ^^^^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:351:9
    |
351 |         AppError::NotFound(format!("Message with ID {} not found", message_id))
    |         ^^^^^^^^ use of undeclared type `AppError`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:356:20
    |
356 |         return Err(AppError::Forbidden("You can only mark messages sent to you as received".to_string()));
    |                    ^^^^^^^^ use of undeclared type `AppError`

error[E0609]: no field `messages` on type `AppState`
   --> src/main.rs:391:30
    |
391 |     let mut messages = state.messages.write().unwrap();
    |                              ^^^^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:393:9
    |
393 |         AppError::NotFound(format!("Message with ID {} not found", message_id))
    |         ^^^^^^^^ use of undeclared type `AppError`

error[E0433]: failed to resolve: use of undeclared type `AppError`
   --> src/main.rs:398:20
    |
398 |         return Err(AppError::Forbidden("You can only mark messages sent to you as read".to_string()));
    |                    ^^^^^^^^ use of undeclared type `AppError`

error[E0308]: mismatched types
   --> src/models/user.rs:158:25
    |
143 |             params.push(update.email.as_ref().unwrap());
    |             ------      ------------------------------ this argument has type `&std::string::String`...
    |             |
    |             ... which causes `params` to have type `Vec<&std::string::String>`
...
158 |             params.push(password_hash.unwrap());
    |                    ---- ^^^^^^^^^^^^^^^^^^^^^^ expected `&String`, found `&str`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note: expected reference `&std::string::String`
               found reference `&str`
note: method defined here
   --> /builddir/build/BUILD/rust-1.85.1-build/rustc-1.85.1-src/library/alloc/src/vec/mod.rs:2416:12

error[E0599]: no method named `bind_all` found for struct `QueryAs` in the current scope
   --> src/models/user.rs:165:14
    |
164 | /         sqlx::query_as::<_, User>(&query)
165 | |             .bind_all(params)
    | |_____________-^^^^^^^^
    |
help: there is a method `bind` with a similar name
    |
165 |             .bind(params)
    |              ~~~~

error[E0599]: no method named `validate` found for struct `models::user::CreateUserRequest` in the current scope
   --> src/handlers/auth.rs:25:9
    |
25  |     req.validate()?;
    |         ^^^^^^^^
    |
   ::: /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.16.1/src/traits.rs:194:8
    |
194 |     fn validate(&self) -> Result<(), ValidationErrors>;
    |        -------- the method is available for `models::user::CreateUserRequest` here
    |
   ::: src/models/user.rs:35:1
    |
35  | pub struct CreateUserRequest {
    | ---------------------------- method `validate` not found for this struct
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `validate_args` with a similar name, but with different arguments
   --> /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.16.1/src/traits.rs:211:5
    |
211 |     fn validate_args(&self, args: Self::Args) -> Result<(), ValidationErrors>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Validate` which provides `validate` is implemented but not in scope; perhaps you want to import it
    |
1   + use validator::Validate;
    |

error[E0599]: no method named `validate` found for struct `LoginRequest` in the current scope
   --> src/handlers/auth.rs:54:9
    |
54  |     req.validate()?;
    |         ^^^^^^^^
    |
   ::: /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.16.1/src/traits.rs:194:8
    |
194 |     fn validate(&self) -> Result<(), ValidationErrors>;
    |        -------- the method is available for `LoginRequest` here
    |
   ::: src/models/auth.rs:29:1
    |
29  | pub struct LoginRequest {
    | ----------------------- method `validate` not found for this struct
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `validate_args` with a similar name, but with different arguments
   --> /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.16.1/src/traits.rs:211:5
    |
211 |     fn validate_args(&self, args: Self::Args) -> Result<(), ValidationErrors>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Validate` which provides `validate` is implemented but not in scope; perhaps you want to import it
    |
1   + use validator::Validate;
    |

error[E0599]: no method named `validate` found for struct `UpdateUserRequest` in the current scope
   --> src/handlers/user.rs:60:9
    |
60  |     req.validate()?;
    |         ^^^^^^^^
    |
   ::: /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.16.1/src/traits.rs:194:8
    |
194 |     fn validate(&self) -> Result<(), ValidationErrors>;
    |        -------- the method is available for `UpdateUserRequest` here
    |
   ::: src/models/user.rs:50:1
    |
50  | pub struct UpdateUserRequest {
    | ---------------------------- method `validate` not found for this struct
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `validate_args` with a similar name, but with different arguments
   --> /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.16.1/src/traits.rs:211:5
    |
211 |     fn validate_args(&self, args: Self::Args) -> Result<(), ValidationErrors>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Validate` which provides `validate` is implemented but not in scope; perhaps you want to import it
    |
1   + use validator::Validate;
    |

error[E0609]: no field `users` on type `AppState`
   --> src/ws.rs:201:27
    |
201 |         let users = state.users.read().unwrap();
    |                           ^^^^^ unknown field
    |
    = note: available fields are: `db`, `config`, `ws_manager`

warning: unused variable: `connection_id_clone`
   --> src/ws.rs:218:9
    |
218 |     let connection_id_clone = connection_id.clone();
    |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection_id_clone`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src/ws.rs:246:9
    |
246 |     let mut recv_task = tokio::spawn(async move {
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0382]: borrow of moved value: `ws_manager`
   --> src/ws.rs:367:13
    |
241 |     let ws_manager = Arc::clone(&state.ws_manager);
    |         ---------- move occurs because `ws_manager` has type `Arc<WebSocketManager>`, which does not implement the `Copy` trait
...
246 |     let mut recv_task = tokio::spawn(async move {
    |                                      ---------- value moved here
247 |         while let Some(result) = receiver.next().await {
    |         ---------------------------------------------- inside of this loop
...
270 |                                             ws_manager.broadcast_to_user(&recipient_id, json);
    |                                             ---------- variable moved due to use in coroutine
...
367 |             ws_manager.remove_connection(&uid, &connection_id);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move
    |
    = note: borrow occurs due to deref coercion to `WebSocketManager`

error[E0592]: duplicate definitions with name `mark_as_read`
   --> src/models/message.rs:189:5
    |
143 |     pub async fn mark_as_read(pool: &Pool<Postgres>, id: Uuid) -> Result<Self> {
    |     -------------------------------------------------------------------------- other definition for `mark_as_read`
...
189 |     pub async fn mark_as_read(db: &Pool<Postgres>, message_id: &str) -> Result<Message, sqlx::Error> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `mark_as_read`

error[E0592]: duplicate definitions with name `mark_as_received`
   --> src/models/message.rs:211:5
    |
127 |     pub async fn mark_as_received(pool: &Pool<Postgres>, id: Uuid) -> Result<Self> {
    |     ------------------------------------------------------------------------------ other definition for `mark_as_received`
...
211 |     pub async fn mark_as_received(db: &Pool<Postgres>, message_id: &str) -> Result<Message, sqlx::Error> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `mark_as_received`

error[E0277]: the trait bound `fn(WebSocketUpgrade, axum::extract::Path<std::string::String>, {type error}, axum::extract::State<AppState>) -> impl futures::Future<Output = {type error}> {ws_handler}: Handler<_, _, _>` is not satisfied
   --> src/ws.rs:183:38
    |
183 |         .route("/chat/:user_id", get(ws_handler))
    |                                  --- ^^^^^^^^^^ the trait `Handler<_, _, _>` is not implemented for fn item `fn(WebSocketUpgrade, Path<String>, ..., ...) -> ... {ws_handler}`
    |                                  |
    |                                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
note: required by a bound in `axum::routing::get`
   --> /home/nekkochan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0107, E0277, E0308, E0382, E0412, E0422, E0432, E0433, E0531...
For more information about an error, try `rustc --explain E0107`.
warning: `onyxchat-server` (bin "onyxchat-server") generated 11 warnings
error: could not compile `onyxchat-server` (bin "onyxchat-server") due to 123 previous errors; 11 warnings emitted
