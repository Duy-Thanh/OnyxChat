# Configuration for OnyxChat API server
# This is a simplified configuration that should be placed in /etc/nginx/conf.d/default.conf

# Rate limiting zone
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# HTTP -> HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    
    # SSL Certificates
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self'; style-src 'self'; font-src 'self'; connect-src 'self' wss://$host/ws;";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    
    # API endpoints
    location /api/ {
        proxy_pass http://server:8081;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # WebSocket endpoint
    location /ws {
        # Strip the /ws prefix when proxying to the server
        proxy_pass http://server:8081;
        proxy_http_version 1.1;
        
        # Required for WebSockets
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Forward original HTTP headers
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        
        # Pass authorization headers
        proxy_set_header Authorization $http_authorization;
        
        # WebSocket specific timeouts - increase significantly for persistent connections
        proxy_connect_timeout 60s;
        proxy_send_timeout 3600s;  # 1 hour
        proxy_read_timeout 3600s;  # 1 hour
        
        # Don't buffer WebSocket connections
        proxy_buffering off;
        
        # Stop nginx from closing WebSocket connections prematurely
        proxy_ignore_client_abort off;
        
        # Keep connections open
        keepalive_timeout 650;
        
        # Add heartbeat timeout
        proxy_socket_keepalive on;
    }
    
    # Static assets (if applicable)
    location /static/ {
        alias /var/www/static/;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        access_log off;
    }
    
    # Root - serve frontend if applicable, or redirect to docs
    location / {
        # For static site hosting
        # root /var/www/html;
        # index index.html;
        # try_files $uri $uri/ /index.html;
        
        # Or redirect to API docs
        return 302 /api/docs;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/error_pages;
        internal;
    }
    
    location = /50x.html {
        root /var/www/error_pages;
        internal;
    }
} 