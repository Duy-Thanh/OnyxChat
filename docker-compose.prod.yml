version: '3.8'
name: onyxchat-production

services:
  postgres:
    image: postgres:14-alpine
    container_name: onyxchat-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-onyxchat}
    restart: always
    networks:
      - onyxchat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    # Hide from public network
    expose:
      - "5432"

  redis:
    image: redis:7-alpine
    container_name: onyxchat-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis} --appendonly yes
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - onyxchat-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    # Hide from public network
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./nodejs-server
      dockerfile: Dockerfile.production
    container_name: onyxchat-server
    # Hide from public network, expose only to nginx
    expose:
      - "8081"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-onyxchat}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - PORT=8081
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - onyxchat-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      replicas: ${SERVER_REPLICAS:-1}

  nginx:
    image: nginx:mainline-alpine
    container_name: onyxchat-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/ssl
      - ./static:/var/www/static
      - ./error_pages:/var/www/error_pages
    restart: always
    depends_on:
      - server
    networks:
      - onyxchat-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  backup:
    image: postgres:14-alpine
    container_name: onyxchat-backup
    volumes:
      - ./backups:/backups
    networks:
      - onyxchat-network
    depends_on:
      - postgres
    environment:
      - PGPASSWORD=${DB_PASSWORD:-postgres}
    entrypoint: |
      sh -c '
        mkdir -p /backups
        echo "Backup service started, will run daily at 3:00 AM"
        while true; do
          sleep_until=$$(( $$(date -d "tomorrow 03:00:00" +%s) - $$(date +%s) ))
          echo "Next backup in $${sleep_until} seconds"
          sleep $${sleep_until}
          
          # Create backup with timestamp
          TIMESTAMP=$$(date "+%Y%m%d-%H%M%S")
          echo "Creating backup at $${TIMESTAMP}"
          pg_dump -h postgres -U ${DB_USER:-postgres} ${DB_NAME:-onyxchat} > /backups/onyxchat-$${TIMESTAMP}.sql
          
          # Delete backups older than 7 days
          find /backups -name "onyxchat-*.sql" -type f -mtime +7 -delete
          echo "Backup completed and old backups cleaned up"
        done
      '
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

networks:
  onyxchat-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: