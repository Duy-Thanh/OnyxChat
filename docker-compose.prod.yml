# version: '3.8'  # REMOVED (obsolete)
name: onyxchat-production

services:
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: onyxchat-postgres
    user: postgres
    volumes:
      - postgres_data_new:/var/lib/postgresql/data
      # - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro  # Removed problematic mount
      - ./backups:/backups
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-onyxchat}
    restart: always
    networks:
      - onyxchat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    # Hide from public network
    expose:
      - "5432"

  redis:
    image: redis:8.0-M04-alpine3.21
    container_name: onyxchat-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis} --appendonly yes
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - onyxchat-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    # Hide from public network
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./nodejs-server
      dockerfile: Dockerfile.production
    container_name: onyxchat-server
    # Hide from public network, expose only to nginx
    expose:
      - "8081"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-onyxchat}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - PORT=8081
      # Hardcoded secrets for development - CHANGE THESE IN REAL PRODUCTION!
      - JWT_SECRET=1234567890abcdefghijklmnopqrstuvwxyz1234567890
      - JWT_REFRESH_SECRET=abcdefghijklmnopqrstuvwxyz1234567890abcdef
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - ENCRYPTION_KEY=0123456789abcdefghijklmnopqrstuv
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - onyxchat-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      replicas: ${SERVER_REPLICAS:-1}

  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: onyxchat-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    restart: always
    depends_on:
      - server
    networks:
      - onyxchat-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  backup:
    image: postgres:17.4-alpine3.21
    container_name: onyxchat-backup
    user: "root" # Run as root to avoid permission issues
    volumes:
      - ./backups:/backups
    networks:
      - onyxchat-network
    depends_on:
      - postgres
    environment:
      - PGPASSWORD=${DB_PASSWORD:-postgres}
    command: >
      bash -c '
        mkdir -p /backups
        chmod 777 /backups
        echo "Backup service started"
        
        # Create initial backup
        TIMESTAMP=$$(date "+%Y%m%d-%H%M%S")
        echo "Creating initial backup at $$TIMESTAMP"
        pg_dump -h postgres -U ${DB_USER:-postgres} ${DB_NAME:-onyxchat} > /backups/onyxchat-$$TIMESTAMP.sql
        
        # Schedule regular backups using a simple approach
        while true; do
          # Sleep for 24 hours
          echo "Next backup in 24 hours"
          sleep 86400
          
          # Create backup with timestamp
          TIMESTAMP=$$(date "+%Y%m%d-%H%M%S")
          echo "Creating backup at $$TIMESTAMP"
          pg_dump -h postgres -U ${DB_USER:-postgres} ${DB_NAME:-onyxchat} > /backups/onyxchat-$$TIMESTAMP.sql
          
          # Delete backups older than 7 days
          find /backups -name "onyxchat-*.sql" -type f -mtime +7 -delete || echo "No old backups to delete"
          echo "Backup completed and old backups cleaned up"
        done
      '
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

networks:
  onyxchat-network:
    driver: bridge

volumes:
  postgres_data_new:
  redis_data: